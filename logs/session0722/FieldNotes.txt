# Save the best model
from azureml.core import Model
best_run.download_file(best_run.get_file_names()[-6], output_file_path='./outputs/')
model = Model.register(ws, model_path='outputs/model.joblib', model_name='Ames-Housing-AutoML-Model', tags=best_run_metrics)
print(model.name, model.id, model.version, sep='\t')

>>>>>>>>>>>>>>>>> ERROR >>>>>>>>>>>>>>>>> 
Failed to download file with error: [Errno 21] Is a directory: './outputs/'
---------------------------------------------------------------------------
IsADirectoryError                         Traceback (most recent call last)
/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_file_utils/file_utils.py in _retry(exec_func, clean_up_func, max_retries, exceptions)
    436         try:
--> 437             return exec_func()
    438         except exceptions as request_exception:

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_file_utils/file_utils.py in exec_func()
    214                                                           max_connections=max_concurrency,
--> 215                                                           validate_content=_validate_check_sum)
    216             file_size = os.stat(path).st_size

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_vendor/azure_storage/blob/baseblobservice.py in get_blob_to_path(self, container_name, blob_name, file_path, open_mode, snapshot, start_range, end_range, validate_content, progress_callback, max_connections, lease_id, if_modified_since, if_unmodified_since, if_match, if_none_match, timeout)
   1855 
-> 1856         with open(file_path, open_mode) as stream:
   1857             blob = self.get_blob_to_stream(

IsADirectoryError: [Errno 21] Is a directory: './outputs/'

During handling of the above exception, another exception occurred:

AzureMLException                          Traceback (most recent call last)
<ipython-input-19-4d00ae1232a4> in <module>
      1 # Save the best model
      2 from azureml.core import Model
----> 3 best_run.download_file(best_run.get_file_names()[-6], output_file_path='./outputs/')
      4 model = Model.register(ws, model_path='outputs/model.joblib', model_name='Ames-Housing-AutoML-Model', tags=best_run_metrics)
      5 print(model.name, model.id, model.version, sep='\t')

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/core/run.py in wrapped(self, *args, **kwargs)
     51                                      "therefore, the {} cannot upload files, or log file backed metrics."
     52                                      .format(self, self.__class__.__name__))
---> 53         return func(self, *args, **kwargs)
     54 
     55     return wrapped

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/core/run.py in download_file(self, name, output_file_path, _validate_checksum)
   2076 
   2077         self._client.artifacts.download_artifact(RUN_ORIGIN, self._container, name, output_file_path,
-> 2078                                                  _validate_checksum)
   2079 
   2080     @_check_for_data_container_id

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_restclient/artifacts_client.py in download_artifact(self, origin, container, path, output_file_path, _validate_checksum)
    267             uri = content_info.content_uri
    268             self._execute_func(download_file, uri, output_file_path, session=self.session,
--> 269                                _validate_check_sum=_validate_checksum)
    270         except HttpOperationError as operation_error:
    271             self._handle_http_operation_error(operation_error, origin, container, path)

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_restclient/clientbase.py in _execute_func(cls, func, *args, **kwargs)
    373         # reset the backoff from 32 seconds to 1 second
    374         return cls._execute_func_internal(
--> 375             DEFAULT_SHORT_BACKOFF, DEFAULT_RETRIES, module_logger, func, _noop_reset, *args, **kwargs)
    376 
    377     @classmethod

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_restclient/clientbase.py in _execute_func_internal(cls, back_off, total_retry, logger, func, reset_func, *args, **kwargs)
    365                 return response
    366             except Exception as error:
--> 367                 left_retry = cls._handle_retry(back_off, left_retry, total_retry, error, logger, func)
    368 
    369             reset_func(*args, **kwargs)  # reset_func is expected to undo any side effects from a failed func call.

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_restclient/clientbase.py in _handle_retry(cls, back_off, left_retry, total_retry, error, logger, func)
    431             # the case 4 will be handled here by adding ConnectTime in the RETRY_EXCEPTIONS.
    432             # also cover case 5
--> 433             raise error
    434 
    435         delay = cls._get_retry_delay(back_off, total_retry, left_retry, status_code)

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_restclient/clientbase.py in _execute_func_internal(cls, back_off, total_retry, logger, func, reset_func, *args, **kwargs)
    356             try:
    357                 logger.debug("ClientBase: Calling {} with url {}".format(func_name, func_url))
--> 358                 response = func(*args, **kwargs)
    359                 if (isinstance(response, Response) and cls._is_retryable_status_code(response.status_code) and
    360                         left_retry > 0):

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_file_utils/file_utils.py in download_file(source_uri, path, max_retries, stream, protocol, session, _validate_check_sum, max_concurrency)
    223                 raise AzureMLException._with_error(azureml_error)
    224 
--> 225         return _retry(exec_func, max_retries=max_retries)
    226 
    227     # download using requests.Session

/anaconda/envs/azureml_py36/lib/python3.6/site-packages/azureml/_file_utils/file_utils.py in _retry(exec_func, clean_up_func, max_retries, exceptions)
    450                     DownloadFailed, error=request_exception
    451                 )
--> 452                 raise AzureMLException._with_error(azureml_error)
    453         finally:
    454             clean_up_func()

AzureMLException: AzureMLException:
	Message: Download of file failed with error: [Errno 21] Is a directory: './outputs/'
	InnerException None
	ErrorResponse 
{
    "error": {
        "code": "UserError",
        "message": "Download of file failed with error: [Errno 21] Is a directory: './outputs/'",
        "inner_error": {
            "code": "ConnectionFailure"
        }
    }
}
